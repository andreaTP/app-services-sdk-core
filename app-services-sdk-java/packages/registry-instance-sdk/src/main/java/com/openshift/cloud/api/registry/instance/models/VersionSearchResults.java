/*
 * Service Registry API
 * Service Registry Instance API  NOTE: This API cannot be called directly from the portal.
 *
 * The version of the OpenAPI document: 2.2.5.Final
 * Contact: apicurio@lists.jboss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.openshift.cloud.api.registry.instance.models;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.openshift.cloud.api.registry.instance.models.SearchedVersion;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Describes the response received when searching for artifacts.
 */
@ApiModel(description = "Describes the response received when searching for artifacts.")
@JsonPropertyOrder({
  VersionSearchResults.JSON_PROPERTY_COUNT,
  VersionSearchResults.JSON_PROPERTY_VERSIONS
})
@JsonTypeName("VersionSearchResults")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class VersionSearchResults {
  public static final String JSON_PROPERTY_COUNT = "count";
  private Integer count;

  public static final String JSON_PROPERTY_VERSIONS = "versions";
  private List<SearchedVersion> versions = new ArrayList<>();

  public VersionSearchResults() { 
  }

  public VersionSearchResults count(Integer count) {
    
    this.count = count;
    return this;
  }

   /**
   * The total number of versions that matched the query (may be more than the number of versions returned in the result set).
   * @return count
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The total number of versions that matched the query (may be more than the number of versions returned in the result set).")
  @JsonProperty(JSON_PROPERTY_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getCount() {
    return count;
  }


  @JsonProperty(JSON_PROPERTY_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCount(Integer count) {
    this.count = count;
  }


  public VersionSearchResults versions(List<SearchedVersion> versions) {
    
    this.versions = versions;
    return this;
  }

  public VersionSearchResults addVersionsItem(SearchedVersion versionsItem) {
    this.versions.add(versionsItem);
    return this;
  }

   /**
   * The collection of artifact versions returned in the result set.
   * @return versions
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The collection of artifact versions returned in the result set.")
  @JsonProperty(JSON_PROPERTY_VERSIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<SearchedVersion> getVersions() {
    return versions;
  }


  @JsonProperty(JSON_PROPERTY_VERSIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setVersions(List<SearchedVersion> versions) {
    this.versions = versions;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VersionSearchResults versionSearchResults = (VersionSearchResults) o;
    return Objects.equals(this.count, versionSearchResults.count) &&
        Objects.equals(this.versions, versionSearchResults.versions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(count, versions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VersionSearchResults {\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    versions: ").append(toIndentedString(versions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

